services:
  # База данных PostgreSQL
  db:
    image: postgres:17-alpine
    container_name: marketplace-db-prod
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    env_file: .env.prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - marketplace-network

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: marketplace-redis-prod
    command: redis-server --requirepass '${REDIS_PASSWORD}'
    volumes:
      - redis_data_prod:/data
    env_file: .env.prod
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - marketplace-network

  # RabbitMQ для очередей
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: marketplace-rabbitmq-prod
    env_file: .env.prod
    volumes:
      - rabbitmq_data_prod:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - marketplace-network

  # Elasticsearch для поиска
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: marketplace-elasticsearch-prod
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data_prod:/usr/share/elasticsearch/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - marketplace-network

  # Основное приложение
  backend:
    build:
      context: .
      dockerfile: deployment/docker/backend/Dockerfile
      target: production
    container_name: marketplace-backend-prod
    command: >
      sh -c "
        python manage.py migrate --no-input &&
        python manage.py collectstatic --no-input --clear &&
        gunicorn config.wsgi:application -c deployment/gunicorn/gunicorn.conf.py
      "
    volumes:
      - static_volume_prod:/app/static
      - ./media:/app/media
      - logs_volume_prod:/app/logs
    env_file: .env.prod
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      elasticsearch: { condition: service_healthy }
    restart: always
    networks:
      - marketplace-network

  # Celery worker
  celery:
    build:
      context: .
      dockerfile: deployment/docker/backend/Dockerfile
      target: production
    container_name: marketplace-celery-prod
    command: celery -A config worker -l info --pool=solo
    volumes:
      - logs_volume_prod:/app/logs
    env_file: .env.prod
    depends_on: [ backend, redis, rabbitmq ]
    restart: always
    networks:
      - marketplace-network

  # Celery beat для периодических задач
  celery-beat:
    build:
      context: .
      dockerfile: deployment/docker/backend/Dockerfile
      target: production
    container_name: marketplace-celery-beat-prod
    command: celery -A config beat -l info
    volumes:
      - logs_volume_prod:/app/logs
    env_file: .env.prod
    depends_on:
      backend:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - marketplace-network

  # Flower для мониторинга Celery
  flower:
    build:
      context: .
      dockerfile: deployment/docker/backend/Dockerfile
      target: production
    container_name: marketplace-flower-prod
    command: celery -A config flower --port=5555
    env_file: .env.prod
    depends_on:
      celery:
        condition: service_started
    restart: always
    networks:
      - marketplace-network
  prometheus:
    image: prom/prometheus:latest
    container_name: marketplace-prometheus-prod
    volumes:
      - ./deployment/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    restart: always
    networks:
      - marketplace-network

  grafana:
    image: grafana/grafana-oss:latest
    container_name: marketplace-grafana-prod
    env_file: .env.prod # Для GRAFANA_PASSWORD
    volumes:
      - grafana_data_prod:/var/lib/grafana
    restart: always
    depends_on:
      - prometheus
    networks:
      - marketplace-network

  # Nginx reverse proxy
  nginx:
    build: ./deployment/docker/nginx
    container_name: marketplace-nginx-prod
    volumes:
      - static_volume_prod:/app/static:ro
      - ./media:/app/media:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro # Папка для SSL сертификатов
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: always
    networks:
      - marketplace-network

volumes:
  postgres_data_prod:
  redis_data_prod:
  rabbitmq_data_prod:
  elasticsearch_data_prod:
  static_volume_prod:
  logs_volume_prod:
  prometheus_data_prod:
  grafana_data_prod:

networks:
  marketplace-network:
    driver: bridge