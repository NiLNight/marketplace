Правила оформления кода

1. Правила для написания docstrings

1.1. Назначение:
   - В начале docstring указывайте назначение класса, функции или метода (для чего он нужен, какую задачу решает).
   - Для классов описывайте их роль в приложении и ключевые методы.
   - Пример (класс):
     """Сервис для управления комментариями. Реализует создание, удаление и валидацию комментариев."""
   - Пример (функция):
     """Создает новый комментарий к отзыву с учетом прав доступа пользователя."""

1.2. Однострочный формат:
   - Если docstring не содержит разделов Args, Returns или Raises, он должен быть однострочным.
   - Используйте глаголы в настоящем времени и избегайте избыточных слов.
   - Пример:
     """Возвращает профиль пользователя по его ID."""

1.3. Args:
   - Перечисляйте параметры с указанием их типа (в скобках) и кратким описанием.
   - Указывайте, является ли параметр необязательным.
   - Пример:
     """
     Args:
         user_id (int): Идентификатор пользователя.
         email (str, optional): Email для уведомления. По умолчанию None.
     """

1.4. Returns:
   - Указывайте тип возвращаемого значения и его описание.
   - Если метод ничего не возвращает, опускайте этот раздел.
   - Пример:
     """
     Returns:
         User: Аутентифицированный пользователь.
     """

1.5. Raises:
   - Перечисляйте возможные исключения с описанием условий их возникновения.
   - Указывайте, если исключение приводит к повторным попыткам (например, в Celery).
   - Пример:
     """
     Raises:
         UserNotFound: Если пользователь с указанным ID не найден.
         SMTPException: Если отправка email не удалась (повторяется до 3 раз).
     """

1.6. Двойные кавычки:
   - Используйте тройные двойные кавычки для всех docstrings.
   - Пример:
     """Docstring goes here."""

1.7. Русский язык:
   - Пишите docstrings на русском языке для единообразия.
   - Избегайте жаргона и сокращений, чтобы текст был понятен новым разработчикам.

1.8. Стиль:
   - Используйте следующий шаблон для многострочных docstrings:
     """
     Назначение класса, функции или метода.

     Args:
         param_name (param_type): Описание параметра.
         another_param (param_type, optional): Описание другого параметра.

     Returns:
         return_type: Описание возвращаемого значения.

     Raises:
         ExceptionName: Описание ситуации, когда возникает исключение.
     """
   - Для классов добавляйте раздел Attributes, если есть ключевые поля.
   - Пример:
     """
     Attributes:
         user: Связь с моделью пользователя (один-к-одному).
         confirmation_code: Код подтверждения (6 символов).
     """

1.9. Документирование асинхронных задач:
   - Указывайте, что метод является асинхронной задачей, и описывайте механизм повторов и таймаутов.
   - Пример:
     """
     Отправляет письмо с кодом подтверждения.

     Args:
         email (str): Адрес электронной почты.
         code (str): Код подтверждения.

     Raises:
         SMTPException: Если отправка не удалась, повторяется 3 раза с интервалом 60 секунд.
     """

2. Правила для написания комментариев

2.1. Обязательные комментарии в сложных местах:
   - Добавляйте комментарии в местах с неочевидной логикой (например, сложные алгоритмы, работа с внешними API, обработка исключений).
   - Комментарии должны отвечать на вопросы: что делает код, почему выбран такой подход, какие есть ограничения.
   - Пример:
     # Проверяем активность пользователя перед созданием комментария, чтобы соблюдать бизнес-логику
     if not user.is_active:
         raise AccountNotActivated("Аккаунт не активирован")

2.2. Русский язык:
   - Пишите комментарии на русском языке, используя понятные термины.
   - Избегайте сокращений, которые могут быть непонятны.

2.3. Формат комментариев:
   - Используйте однострочные комментарии (#) для кратких пояснений.
   - Для сложных блоков пишите многострочные комментарии, структурируя их по пунктам (что, почему, ограничения).
   - Пример:
     # Валидация email перед отправкой:
     # - Проверяем формат через Django validator.
     # - Если email некорректен, логируем ошибку и завершаем задачу.
     try:
         validate_email(email)
     except ValidationError:
         logger.error(f"Invalid email: {email}")
         return

2.4. Избегайте избыточных комментариев:
   - Не комментируйте очевидные операции (например, присваивание переменных).
   - Плохой пример:
     # Устанавливаем значение 10
     x = 10
   - Хороший пример:
     # Игнорируем нулевые оценки для корректного расчета среднего рейтинга
     ratings = [r for r in ratings if r != 0]

2.5. Комментарии к TODO и FIXME:
   - Используйте метки TODO (для будущих задач) и FIXME (для проблем).
   - Указывайте задачу, срок или ответственного.
   - Пример:
     # TODO: Добавить валидацию длины пароля (к 01.06.2025, Иванов)
     # FIXME: Исправить обработку ошибки при отсутствии отзыва

2.6. Комментарии к логированию:
   - Объясняйте, какие данные логируются и почему это важно для отладки или мониторинга.
   - Пример:
     # Логируем попытку аутентификации с IP и User-Agent для анализа безопасности
     logger.error(f"Invalid token from IP={request.META.get('REMOTE_ADDR')}")