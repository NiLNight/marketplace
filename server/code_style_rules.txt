Правила оформления кода

1. Правила для написания docstrings

1.1. Назначение:
   - В начале docstring всегда должно быть указано назначение класса, функции или метода (для чего он нужен).

1.2. Однострочный формат:
   - Если в docstring нет разделов Args, Returns или Raises, он должен быть однострочным.
   - Пример:
     """Назначение класса, функции или метода."""

1.3. Args:
   - Перечисление параметров с указанием их типа (в скобках) и описания.
   - Пример:
     """
     Args:
         param_name (param_type): Описание параметра.
         another_param (another_type): Описание другого параметра.
     """
   - Раздел Args опускается, если нет аргументов.

1.4. Returns:
   - Описание возвращаемого значения, включая его тип.
   - Пример:
     """
     Returns:
         return_type: Описание возвращаемого значения.
     """
   - Раздел Returns опускается, если ничего не возвращается.

1.5. Raises:
   - Перечисление возможных исключений и их описание.
   - Пример:
     """
     Raises:
         ExceptionName: Описание ситуации, когда возникает исключение.
         AnotherException: Описание другого возможного исключения.
     """

1.6. Двойные кавычки:
   - Docstrings заключены в тройные двойные кавычки.
   - Пример:
     """Docstring goes here"""

1.7. Русский язык:
   - Docstrings написаны на русском языке.

1.8. Стиль:
   - Общий стиль для многострочных docstrings:
     """
     Назначение класса, функции или метода.

     Args: (Опускается, если нет аргументов)
         param_name (param_type): Описание параметра.
         another_param (another_type): Описание другого параметра.

     Returns: (Опускается, если ничего не возвращается)
         return_type: Описание возвращаемого значения.

     Raises:
         ExceptionName: Описание ситуации, когда возникает исключение.
         AnotherException: Описание другого возможного исключения.
     """

2. Правила для написания комментариев

2.1. Обязательные комментарии в сложных местах:
   - В местах, где логика кода сложна или неочевидна (например, сложные алгоритмы, работа с внешними API, обработка исключений), должны быть добавлены поясняющие комментарии.
   - Комментарии должны объяснять, что делает код, почему выбран такой подход и какие могут быть последствия.
   - Пример:
     # Проверяем существование отзыва перед созданием комментария, чтобы избежать лишних запросов к базе данных
     review = Review.objects.get(pk=review_id)

2.2. Русский язык:
   - Все комментарии в коде должны быть написаны на русском языке для единообразия с docstrings.

2.3. Формат комментариев:
   - Используйте однострочные комментарии (#) для кратких пояснений.
   - Для многострочных пояснений используйте несколько однострочных комментариев или docstring внутри функции, если это уместно.
   - Пример многострочного комментария:
     # Следующий блок кода выполняет валидацию данных.
     # Если данные некорректны, выбрасывается исключение InvalidCommentData.
     # Это позволяет избежать сохранения пустых комментариев.

2.4. Избегайте избыточных комментариев:
   - Не комментируйте очевидные вещи, такие как присваивание переменных или простые операции.
   - Плохой пример:
     # Присваиваем переменной x значение 10
     x = 10
   - Хороший пример:
     # Вычисляем среднюю оценку, игнорируя нулевые значения
     average = sum(ratings) / len([r for r in ratings if r != 0])

2.5. Комментарии к TODO и FIXME:
   - Используйте метки TODO и FIXME для обозначения незавершенного кода или проблем.
   - Указывайте, что нужно сделать, и, если возможно, срок или ответственного.
   - Пример:
     # TODO: Добавить проверку активности пользователя перед созданием комментария (к 01.06.2025)
     # FIXME: Исправить обработку ошибок при отсутствии отзыва