version: '3.8'

services:
  db:
    image: postgres:17-alpine # Используем легковесный alpine-образ
    container_name: marketplace-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${DB_PORT:-5432}:5432" # Используем порт из .env, по умолчанию 5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: marketplace-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: marketplace-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # Веб-интерфейс
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: marketplace-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: deployment/docker/backend/Dockerfile
    container_name: marketplace-backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --no-input --clear &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app # Монтируем код для удобства локальной разработки
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy # Ждем, пока elastic будет готов
    restart: unless-stopped

  celery:
    build:
      context: .
      dockerfile: deployment/docker/backend/Dockerfile
    container_name: marketplace-celery-worker
    command: celery -A config worker -l debug --pool=solo
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  elasticsearch_data:
  static_volume:
  media_volume: