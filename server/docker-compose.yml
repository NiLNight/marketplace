services:
  db:
    image: postgres:17-alpine
    container_name: marketplace-db # Имя без суффикса
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      # Явно передаем переменные, которые нужны postgres для инициализации
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    env_file:
      - .env # Используем .env по умолчанию
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: marketplace-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: marketplace-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # Веб-интерфейс
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    container_name: marketplace-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=10s" ]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: deployment/docker/backend/Dockerfile
      target: development # Указываем, какую цель из Dockerfile использовать
    container_name: marketplace-backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app # Монтируем код для live-reload
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      elasticsearch: { condition: service_healthy }
    restart: unless-stopped

  celery:
    build:
      context: .
      dockerfile: deployment/docker/backend/Dockerfile
      target: development
    container_name: marketplace-celery-worker
    command: celery -A config worker -l debug --pool=solo
    volumes:
      - .:/app
    env_file: .env
    depends_on:
      - backend
      - redis
      - rabbitmq
    restart: unless-stopped

volumes:
  postgres_data: # Имена volume'ов без суффиксов
  elasticsearch_data: