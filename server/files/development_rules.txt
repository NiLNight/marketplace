Правила валидации и других аспектов разработки

1. Правила валидации данных

1.1. Разделение ответственности:
   - Все публичные методы и классы в примерах должны сопровождаться docstrings, соответствующими code_style_rules.txt.
   - Валидация формата, типов и обязательных полей — в сериализаторах.
   - Проверка бизнес-логики (существование объектов, права доступа) — в сервисах.
   - Ограничения базы данных (уникальность, max_length) — в моделях.
   - Пример:
     # Сериализатор: Проверка формата email
     email = serializers.EmailField(required=True)
     # Сервис: Проверка активности пользователя
     if not user.is_active:
         raise AccountNotActivated("Аккаунт не активирован")
     # Модель: Уникальность email
     email = models.EmailField(unique=True)

1.2. Проверка в сериализаторах:
   - Используйте встроенные валидаторы (например, `EmailValidator`, `UniqueValidator`) и методы `validate_<field>` для специфичных проверок.
   - Проверяйте ссылочную целостность через `PrimaryKeyRelatedField` или кастомные методы.
   - Пример:
     class CommentCreateSerializer(serializers.Serializer):
         """Сериализатор для создания комментария к отзыву."""
         review = serializers.PrimaryKeyRelatedField(queryset=Review.objects.all(), read_only=True)
         text = serializers.CharField(max_length=5000)

         def validate_text(self, value):
             if not is_valid_text(value):
                 raise serializers.ValidationError("Текст не может быть пустым.")
             return value

1.3. Проверка в сервисах:
   - Проводите проверки, требующие доступа к базе данных или сложной логики (например, проверка связей между объектами).
   - Используйте кастомные исключения с понятными сообщениями.
   - Пример:
     if parent.review_id != review.id:
         raise InvalidCommentData("Родительский комментарий должен относиться к тому же отзыву.")

1.4. Проверка в моделях:
   - Задавайте ограничения на уровне полей (например, `max_length`, `unique`, `null=False`).
   - Используйте `clean()` для кастомной валидации и валидаторы (`RegexValidator`, `FileExtensionValidator`).
   - Вызывайте `full_clean()` в методе `save` для автоматической проверки.
   - Пример:
     phone = models.CharField(
         max_length=20,
         validators=[RegexValidator(r'^\+\d{9}$', message="Неверный формат номера телефона")]
     )
     def save(self, *args, **kwargs):
         self.full_clean()
         super().save(*args, **kwargs)

1.5. Использование сигналов для автоматизации:
   - Используйте сигналы (`post_save`, `pre_save`) для создания или обновления связанных объектов.
   - Логируйте действия сигналов для отладки.
   - Пример:
     @receiver(post_save, sender=User)
     def create_user_profile(sender, instance, created, **kwargs):
         if created:
             logger.info(f"Creating profile for user={instance.id}")
             UserProfile.objects.create(user=instance)

1.6. Защита критических полей:
   - Запрещайте изменение критических полей (например, `email`, `public_id`) на уровне сериализатора с использованием `read_only_fields` или `validate_<field>`.
   - Для операций вне API добавляйте защиту в метод `clean` модели.
   - Пример (сериализатор):
     class UserSerializer(serializers.ModelSerializer):
         email = serializers.EmailField(read_only=True)
         class Meta:
             model = User
             fields = ['username', 'email']
             read_only_fields = ['email']
   - Пример (модель):
     def clean(self):
         if self.pk and self.email != User.objects.get(pk=self.pk).email:
             raise ValidationError("Изменение email запрещено.")

1.7. Избегайте дублирования:
   - Проводите каждую проверку только на одном уровне (сериализатор, сервис или модель).
   - Выносите повторяющиеся проверки в утилитные функции.
   - Пример:
     def is_valid_text(text: str) -> bool:
         return bool(text and text.strip())

1.8. Информативные ошибки:
   - Используйте понятные сообщения об ошибках, подходящие для вывода клиенту.
   - Поддерживайте структуру, пригодную для локализации (например, коды ошибок). Для локализации используйте Django i18n.
   - Пример:
     from django.utils.translation import gettext_lazy as _
     raise InvalidUserData(
         detail=_("Неверный формат email"),
         code="invalid_email"
     )

2. Обработка ошибок

2.1. Использование кастомных исключений:
   - Создавайте кастомные исключения для каждой категории ошибок с указанием HTTP-статуса, сообщения и кода.
   - Поддерживайте структуру `{detail: str, code: str}` для локализации.
   - Пример:
     class UserNotFound(APIException):
         status_code = 404
         default_detail = "Пользователь не найден"
         default_code = "not_found"

2.2. Централизованная обработка:
   - Используйте декораторы или middleware для обработки ошибок во всех API-представлениях.
   - Возвращайте JSON-ответы с полями `detail` и `code`.
   - Пример:
     return Response({"detail": "Пользователь не найден", "code": "not_found"}, status=404)

2.3. Логирование ошибок:
   - Логируйте ошибки с доступным контекстом: пользователь (например, user_id), путь запроса (для API), task_id (для Celery), IP-адрес (для безопасности).
   - Пример:
     logger.warning(f"User {user_id} not found, path={request.path}, "
     f"IP={request.META.get('REMOTE_ADDR')}")

3. Логирование

3.1. Уровни логирования:
   - Используйте `info` для успешных операций, `warning` для некритичных ошибок, `error` для критических сбоев.
   - Пример:
     logger.info(f"Created user {user.id}, email={user.email}, path={request.path}, "
     f"IP={request.META.get('REMOTE_ADDR')}")
     logger.error(f"Failed to send email: {str(e)}, user_id={user_id or 'unknown'}, "
     f"task_id={task_id}, IP={request.META.get('REMOTE_ADDR', 'unknown')}")

3.2. Информативность:
   - Включайте в логи доступные элементы контекста: идентификатор пользователя (например, user_id), объекта (например, email), task_id (для Celery), путь запроса (для API), IP-адрес. Настройте ротацию логов для предотвращения переполнения.
   - Пример:
     logger.info(f"Sending email to {email}, user_id={user_id or 'unknown'}, "
     f"task_id={task_id}, IP={request.META.get('REMOTE_ADDR')}")

4. Тестирование

4.1. Покрытие тестами:
   - Покрывайте юнит-тестами все публичные методы сервисов, API-эндпоинты и валидаторы.
   - Тестируйте успешные сценарии и обработку ошибок.
   - Пример:
     def test_create_comment_invalid_data(self):
         data = {"review": 1, "text": ""}
         with self.assertRaises(InvalidCommentData):
             CommentService.create_comment(data, self.user)

4.2. Тестирование валидации:
   - Проверяйте все случаи: пустые данные, некорректные типы, несуществующие объекты.
   - Пример:
     def test_serializer_empty_text(self):
         serializer = CommentCreateSerializer(data={"text": ""})
         self.assertFalse(serializer.is_valid())
         self.assertIn("text", serializer.errors)

5. Асинхронные задачи

5.1. Использование Celery:
   - Реализуйте длительные операции (email, уведомления) через Celery.
   - Настройте повторы для операций, подверженных сбоям (например, `autoretry_for=(SMTPException,)`).
   - Для обработки состояний задач используйте хуки `on_success` и `on_failure`, если требуется логирование или пост-обработка (см. https://docs.celeryq.dev/en/stable/userguide/tasks.html#task-states).
   - Пример:
     @shared_task(autoretry_for=(SMTPException,), max_retries=3, countdown=60)
     def send_email(email: str, message: str, user_id: int = None) -> None:
         send_mail(subject="Уведомление", message=message, recipient_list=[email])

     @send_email.on_success
     def on_email_success(self, retval, task_id, args, kwargs):
         logger.info(f"Email sent successfully to {args[0]}, task_id={task_id}, "
         f"user_id={kwargs.get('user_id', 'unknown')}")

     @send_email.on_failure
     def on_email_failure(self, exc, task_id, args, kwargs):
         logger.error(f"Failed to send email to {args[0]}, task_id={task_id}, "
         f"user_id={kwargs.get('user_id', 'unknown')}, error={str(exc)}")

5.2. Мониторинг задач:
   - Используйте инструменты (например, Celery Flower) для мониторинга выполнения задач.
   - Логируйте начало, завершение и ошибки задач с `task_id`.
   - Пример:
     # Логируем начало задачи с контекстом
     logger.info(f"Task started: send_email to {email}, user_id={user_id or 'unknown'}, "
     f"task_id={self.request.id}, IP={request.META.get('REMOTE_ADDR', 'unknown')}")

6. Безопасность

6.1. Проверка прав доступа:
   - Проверяйте права доступа и активность пользователя перед операциями.
   - Пример:
     if not user.is_active:
         raise AccountNotActivated("Аккаунт не активирован")

6.2. Rate limiting:
   - Применяйте `AnonRateThrottle` или кастомные лимиты к публичным эндпоинтам.
   - Пример:
     class UserRegistrationView(APIView):
         throttle_classes = [AnonRateThrottle]

6.3. Защита паролей:
   - Проверяйте минимальную длину пароля (не менее 8 символов) и сложность (буквы, цифры).
   - Пример:
     def validate_password(self, value):
         if len(value) < 8:
             raise serializers.ValidationError("Пароль должен содержать не менее 8 символов.")

7. Транзакции

7.1. Использование транзакций:
   - Используйте `transaction.atomic()` для операций, затрагивающих несколько моделей.
   - Пример:
     with transaction.atomic():
         user = User.objects.create_user(username, email, password)
         EmailVerified.objects.create(user=user, confirmation_code=code)

8. Кэширование

8.1. Кэширование данных:
   - Кэшируйте часто запрашиваемые и редко меняющиеся данные (например, профили, списки).
   - Инвалидируйте кэш при обновлении данных, например, с помощью сигналов `post_save`.
   - Используйте префиксы для ключей кэша.
   - Пример:
     cache_key = f"user_profile:{user_id}"
     CacheService.set_cached_data(cache_key, data, timeout=3600)
     CacheService.invalidate_cache(prefix=f"order_detail:{pk}:{user_id}")

     from django.db.models.signals import post_save
     from django.dispatch import receiver

     @receiver(post_save, sender=User)
     def invalidate_user_cache(sender, instance, **kwargs):
         cache_key = f"user_profile:{instance.id}"
         CacheService.invalidate_cache(prefix=cache_key)
         logger.info(f"Invalidated cache for user_id={instance.id}")

9. Общие рекомендации

9.1. Единообразие:
   - Используйте `snake_case` для Python, `camelCase` для JavaScript.
   - Применяйте одинаковые подходы к валидации, ошибкам и логированию.

9.2. Документация:
   - Каждый публичный метод и класс должен иметь docstring по правилам code_style_rules.txt.
   - Комментируйте сложные участки кода.

9.3. Производительность:
   - Оптимизируйте запросы с помощью `select_related` и `prefetch_related`.
   - Избегайте избыточных проверок валидации.

9.4. Безопасность:
   - Проверяйте права доступа и защищайте от инъекций (например, используйте ORM вместо raw SQL).
   - Используйте rate limiting для защиты API.

9.5. Использование Elasticsearch для поиска

9.5.1. Обязательное использование:
   - Применяйте Elasticsearch для всех операций полнотекстового поиска, фильтрации и ранжирования данных. Это обеспечивает высокую производительность и масштабируемость при работе с большими объемами данных.
   - Пример:
     # Поиск по продуктам
     from elasticsearch_dsl import Search
     search = Search(index="products").query("match", title=query)
     results = search.execute()

9.5.2. Интеграция с моделями:
   - Определяйте документы Elasticsearch, соответствующие структуре моделей базы данных. Используйте библиотеки, такие как `django-elasticsearch-dsl`, для упрощения синхронизации.
   - Настройте автоматическое обновление индексов через сигналы (`post_save`, `post_delete`) и асинхронные задачи Celery.
   - Пример:
     from django.db.models.signals import post_save
     from django.dispatch import receiver
     from myapp.tasks import update_elasticsearch_index

     @receiver(post_save, sender=Product)
     def sync_product_to_elasticsearch(sender, instance, **kwargs):
         update_elasticsearch_index.delay(instance.id, "product")

9.5.3. Валидация поисковых запросов:
   - Проверяйте формат и безопасность поисковых запросов в сериализаторах перед передачей в Elasticsearch.
   - Используйте кастомные валидаторы для проверки длины запроса, допустимых символов и фильтров.
   - Пример:
     class SearchSerializer(serializers.Serializer):
         """Сериализатор для валидации поисковых запросов."""
         query = serializers.CharField(max_length=200, required=True)

         def validate_query(self, value):
             if not value.strip():
                 raise serializers.ValidationError("Поисковый запрос не может быть пустым.")
             return value

9.5.4. Обработка ошибок:
   - Проверяйте доступность Elasticsearch перед выполнением операций. При недоступности сервиса выбрасывайте кастомное исключение с HTTP-статусом 503.
   - Поддерживайте структуру `{detail: str, code: str}` для сообщений об ошибках.
   - Пример:
     class ElasticsearchUnavailable(APIException):
         status_code = 503
         default_detail = "Сервис поиска временно недоступен"
         default_code = "service_unavailable"

9.5.5. Логирование операций:
   - Логируйте начало, завершение и ошибки операций поиска с указанием контекста: запрос, количество результатов, время выполнения, `task_id` (для Celery), IP-адрес.
   - Используйте уровень `info` для успешных операций, `error` для сбоев.
   - Пример:
     logger.info(f"Searching in Elasticsearch: query={query}, results_count={len(results)}, "
                 f"duration_ms={duration}, task_id={task_id or 'unknown'}, "
                 f"IP={request.META.get('REMOTE_ADDR', 'unknown')}")

9.5.6. Кэширование результатов:
   - Кэшируйте часто запрашиваемые результаты поиска с использованием ключей вида `search_results:<query_hash>`.
   - Инвалидируйте кэш при изменении данных с помощью сигналов (`post_save`, `post_delete`).
   - Пример:
     cache_key = f"search_results:{hash_query(query)}"
     CacheService.set_cached_data(cache_key, results, timeout=3600)

     @receiver(post_save, sender=Product)
     def invalidate_search_cache(sender, instance, **kwargs):
         CacheService.invalidate_cache(prefix="search_results")
         logger.info(f"Invalidated search cache for product_id={instance.id}")

9.5.7. Асинхронные задачи:
   - Выполняйте индексацию и обновление документов Elasticsearch асинхронно через Celery.
   - Настройте повторы для операций, подверженных сбоям (например, `autoretry_for=(ConnectionError,)`).
   - Пример:
     @shared_task(autoretry_for=(ConnectionError,), max_retries=3, countdown=60)
     def update_elasticsearch_index(object_id: int, object_type: str) -> None:
         obj = get_object_or_none(object_type, object_id)
         if obj:
             obj.to_elasticsearch()
             logger.info(f"Indexed {object_type} id={object_id}, task_id={self.request.id}")

9.5.8. Безопасность:
   - Проверяйте права доступа к данным перед возвратом результатов поиска.
   - Применяйте фильтры на уровне Elasticsearch для ограничения доступа к данным.
   - Пример:
     search = search.filter("term", user_id=request.user.id)