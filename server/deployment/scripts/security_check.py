#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- Middleware
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
- SSL/TLS
- Rate limiting
- CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import os
import sys
import subprocess
import importlib
from pathlib import Path
from typing import List, Tuple, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

try:
import django
django.setup()
from django.conf import settings
from django.core.management import execute_from_command_line
    from django.core.management.base import CommandError
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: Django –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {e}")
    sys.exit(1)

class SecurityChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.success = []
        
    def log_error(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É."""
        self.errors.append(message)
        print(f"‚ùå {message}")
    
    def log_warning(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."""
        self.warnings.append(message)
        print(f"‚ö†Ô∏è  {message}")
    
    def log_success(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É."""
        self.success.append(message)
        print(f"‚úÖ {message}")
    
    def check_django_settings(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django."""
        print("\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django:")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ DEBUG
        if settings.DEBUG:
            self.log_warning("DEBUG=True - –æ—Ç–∫–ª—é—á–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    else:
            self.log_success("DEBUG=False - –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SECRET_KEY
        if len(settings.SECRET_KEY) < 50:
            self.log_error("SECRET_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        elif 'django-insecure' in settings.SECRET_KEY:
            self.log_error("SECRET_KEY —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å")
        else:
            self.log_success("SECRET_KEY —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ALLOWED_HOSTS
        if not settings.ALLOWED_HOSTS:
            self.log_error("ALLOWED_HOSTS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        elif '*' in settings.ALLOWED_HOSTS:
            self.log_warning("ALLOWED_HOSTS —Å–æ–¥–µ—Ä–∂–∏—Ç '*' - –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ")
        else:
            self.log_success("ALLOWED_HOSTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if hasattr(settings, 'SECURE_SSL_REDIRECT') and settings.SECURE_SSL_REDIRECT:
            self.log_success("HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤–∫–ª—é—á–µ–Ω")
        else:
            self.log_warning("HTTPS —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–µ –≤–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HSTS
        if hasattr(settings, 'SECURE_HSTS_SECONDS') and settings.SECURE_HSTS_SECONDS > 0:
            self.log_success("HSTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
            self.log_warning("HSTS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö cookies
        if hasattr(settings, 'SESSION_COOKIE_SECURE') and settings.SESSION_COOKIE_SECURE:
            self.log_success("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–µ cookies")
        else:
            self.log_warning("–°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ cookies –Ω–µ –∑–∞—â–∏—â–µ–Ω—ã")
        
        if hasattr(settings, 'CSRF_COOKIE_SECURE') and settings.CSRF_COOKIE_SECURE:
            self.log_success("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ CSRF cookies")
    else:
            self.log_warning("CSRF cookies –Ω–µ –∑–∞—â–∏—â–µ–Ω—ã")

    def check_middleware(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç middleware."""
        print("\nüõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ Middleware:")
        
        middleware = getattr(settings, 'MIDDLEWARE', [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SecurityMiddleware
        if 'django.middleware.security.SecurityMiddleware' in middleware:
            self.log_success("SecurityMiddleware –≤–∫–ª—é—á–µ–Ω")
        else:
            self.log_error("SecurityMiddleware –Ω–µ –≤–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CSRF
        if 'django.middleware.csrf.CsrfViewMiddleware' in middleware:
            self.log_success("CSRF middleware –≤–∫–ª—é—á–µ–Ω")
        else:
            self.log_error("CSRF middleware –Ω–µ –≤–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ XSS
        if 'django.middleware.security.SecurityMiddleware' in middleware:
            self.log_success("XSS –∑–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞")
    else:
            self.log_warning("XSS –∑–∞—â–∏—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Clickjacking
        if 'django.middleware.clickjacking.XFrameOptionsMiddleware' in middleware:
            self.log_success("Clickjacking –∑–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞")
        else:
            self.log_warning("Clickjacking –∑–∞—â–∏—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    
    def check_dependencies(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏."""
        print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ safety
            result = subprocess.run(['safety', 'check'], capture_output=True, text=True)
            if result.returncode == 0:
                self.log_success("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            else:
                self.log_warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")
                print(result.stdout)
        except FileNotFoundError:
            self.log_warning("safety –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install safety")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        critical_deps = [
            'django',
            'psycopg2-binary',
            'redis',
            'celery',
            'elasticsearch-dsl',
            'gunicorn'
        ]
        
        for dep in critical_deps:
            try:
                importlib.import_module(dep.replace('-', '_'))
                self.log_success(f"{dep} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except ImportError:
                self.log_error(f"{dep} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def check_database(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        
        try:
            from django.db import connection
            with connection.cursor() as cursor:
                cursor.execute("SELECT version();")
                version = cursor.fetchone()[0]
                self.log_success(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞: {version}")
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –¥–ª—è –ë–î
        db_settings = settings.DATABASES['default']
        if 'OPTIONS' in db_settings and 'sslmode' in db_settings['OPTIONS']:
            if db_settings['OPTIONS']['sslmode'] == 'require':
                self.log_success("SSL –¥–ª—è –ë–î –≤–∫–ª—é—á–µ–Ω")
            else:
                self.log_warning("SSL –¥–ª—è –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            self.log_warning("SSL –¥–ª—è –ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def check_static_files(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã."""
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:")
        
        static_root = getattr(settings, 'STATIC_ROOT', None)
        if static_root and os.path.exists(static_root):
            self.log_success("STATIC_ROOT –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
            self.log_warning("STATIC_ROOT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ collectstatic
        try:
            from django.core.management import call_command
            call_command('collectstatic', '--dry-run', verbosity=0)
            self.log_success("collectstatic —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ collectstatic: {e}")
    
    def check_logging(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        
        if hasattr(settings, 'LOGGING') and settings.LOGGING:
            self.log_success("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        else:
            self.log_warning("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
        log_dir = Path('logs')
        if log_dir.exists():
            self.log_success("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            self.log_warning("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def check_rate_limiting(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting."""
        print("\nüö¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Rate Limiting:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Django REST Framework throttling
        if 'rest_framework' in settings.INSTALLED_APPS:
            drf_settings = getattr(settings, 'REST_FRAMEWORK', {})
            if 'DEFAULT_THROTTLE_CLASSES' in drf_settings:
                self.log_success("DRF throttling –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                self.log_warning("DRF throttling –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            self.log_warning("Django REST Framework –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def check_cors(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS:")
        
        if 'corsheaders' in settings.INSTALLED_APPS:
            cors_settings = getattr(settings, 'CORS_ALLOWED_ORIGINS', [])
            if cors_settings:
                self.log_success("CORS origins –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                self.log_warning("CORS origins –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            self.log_warning("django-cors-headers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def check_ssl_certificates(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã."""
        print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:")
        
        ssl_dir = Path('deployment/ssl')
        if ssl_dir.exists():
            cert_file = ssl_dir / 'marketplace.crt'
            key_file = ssl_dir / 'marketplace.key'
            
            if cert_file.exists() and key_file.exists():
                self.log_success("SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
            else:
                self.log_warning("SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            self.log_warning("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SSL –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    def run_django_check(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Django check --deploy."""
        print("\nüîç –ó–∞–ø—É—Å–∫ Django check --deploy:")
        
        try:
            from django.core.management import call_command
            call_command('check', '--deploy')
            self.log_success("Django check --deploy –ø—Ä–æ–π–¥–µ–Ω")
        except Exception as e:
            self.log_error(f"Django check --deploy –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
    
    def check_environment_variables(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        
        required_vars = [
            'SECRET_KEY',
            'DB_HOST',
            'DB_NAME',
            'DB_USER',
            'DB_PASS',
            'REDIS_HOST',
            'RABBITMQ_HOST'
        ]
        
        for var in required_vars:
            if os.getenv(var):
                self.log_success(f"{var} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                self.log_error(f"{var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–æ–≤
        env_files = []
        if Path('.env').exists():
            env_files.append('.env')
        if Path('.env.prod').exists():
            env_files.append('.env.prod')
        
        if env_files:
            self.log_success(f"–ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(env_files)}")
        else:
            self.log_error("–§–∞–π–ª—ã .env –∏–ª–∏ .env.prod –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def generate_report(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ."""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–ï–¢ –û –ü–†–û–í–ï–†–ö–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("="*60)
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(self.success)}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(self.warnings)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(self.errors)}")
        
        if self.errors:
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                print(f"  - {error}")
        
        if self.warnings:
            print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for warning in self.warnings:
                print(f"  - {warning}")
        
        if self.success:
            print("\n‚úÖ –£–°–ü–ï–®–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
            for success in self.success[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"  - {success}")
            if len(self.success) > 10:
                print(f"  ... –∏ –µ—â–µ {len(self.success) - 10} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        
        print("\n" + "="*60)
        
        if self.errors:
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ù–ï –ü–†–û–ô–î–ï–ù–ê!")
            return False
        elif self.warnings:
            print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
            return True
        else:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
    
    def run_all_checks(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        print("üîí –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("="*60)
        
        self.check_environment_variables()
        self.check_django_settings()
        self.check_middleware()
        self.check_dependencies()
        self.check_database()
        self.check_static_files()
        self.check_logging()
        self.check_rate_limiting()
        self.check_cors()
        self.check_ssl_certificates()
        self.run_django_check()
        
        return self.generate_report()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    checker = SecurityChecker()
    success = checker.run_all_checks()
    
    if success:
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("- –ò—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
        print("- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        print("- –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        print("- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        print("- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main()) 