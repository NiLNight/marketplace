"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SECRET_KEY –¥–ª—è Django.

–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –∫–ª—é—á –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
–ø–æ –µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
import sys
import secrets
import string
from pathlib import Path
from typing import Optional


def generate_secret_key(length: int = 50) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π SECRET_KEY.
    
    Args:
        length (int): –î–ª–∏–Ω–∞ –∫–ª—é—á–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 —Å–∏–º–≤–æ–ª–æ–≤.
    
    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SECRET_KEY.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Django SECRET_KEY
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*(-_=+)"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º secrets –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Å—Ç–æ–π–∫–æ—Å—Ç–∏
    secret_key = ''.join(secrets.choice(alphabet) for _ in range(length))

    return secret_key


def check_existing_secret_key() -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SECRET_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Returns:
        Optional[str]: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∏–ª–∏ None.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    existing_key = os.getenv('SECRET_KEY')
    if existing_key and existing_key != 'your-secret-key-here':
        return existing_key

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª—ã
    env_files = ['.env', '.env.prod']

    for env_file in env_files:
        env_path = Path(env_file)
        if env_path.exists():
            try:
                with open(env_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line.startswith('SECRET_KEY='):
                            key = line.split('=', 1)[1].strip('"\'')
                            if key and key != 'your-secret-key-here':
                                return key
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {env_file}: {e}")

    return None


def update_env_file(env_file: str, new_key: str) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç SECRET_KEY –≤ —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Args:
        env_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        new_key (str): –ù–æ–≤—ã–π SECRET_KEY.
    
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.
    """
    env_path = Path(env_file)

    if not env_path.exists():
        print(f"‚ùå –§–∞–π–ª {env_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False

    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(env_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å SECRET_KEY
        secret_key_found = False
        for i, line in enumerate(lines):
            if line.strip().startswith('SECRET_KEY='):
                lines[i] = f'SECRET_KEY="{new_key}"\n'
                secret_key_found = True
                break

        # –ï—Å–ª–∏ SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü
        if not secret_key_found:
            lines.append(f'\n# Django Secret Key\nSECRET_KEY="{new_key}"\n')

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(env_path, 'w', encoding='utf-8') as f:
            f.writelines(lines)

        print(f"‚úÖ SECRET_KEY –æ–±–Ω–æ–≤–ª–µ–Ω –≤ {env_file}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {env_file}: {e}")
        return False


def create_env_file(env_file: str, new_key: str) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å SECRET_KEY.
    
    Args:
        env_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        new_key (str): –ù–æ–≤—ã–π SECRET_KEY.
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.
    """
    env_path = Path(env_file)

    if env_path.exists():
        print(f"‚ö†Ô∏è  –§–∞–π–ª {env_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False

    try:
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π .env —Ñ–∞–π–ª
        env_content = f"""# Django Settings
SECRET_KEY="{new_key}"
DEBUG=True
ENVIRONMENT=development

# Database Settings
DB_ENGINE=django.db.backends.postgresql
DB_HOST=localhost
DB_PORT=5432
DB_NAME=marketplace_dev
DB_USER=marketplace_user
DB_PASS=your-password

# Redis Settings
REDIS_HOST=localhost
REDIS_PORT=6379

# RabbitMQ Settings
RABBITMQ_HOST=localhost
RABBITMQ_PORT=5672

# Elasticsearch Settings
ELASTICSEARCH_HOSTS=localhost:9200

# Email Settings
EMAIL_HOST_USER=your-email@example.com
EMAIL_HOST_PASSWORD=your-email-password

# Frontend URL
FRONTEND_URL=http://localhost:3000

# Grafana Password (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
GRAFANA_PASSWORD=admin123
"""

        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_content)

        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {env_file}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {env_file}: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä SECRET_KEY –¥–ª—è Django")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
    existing_key = check_existing_secret_key()
    if existing_key:
        print(f"üìù –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SECRET_KEY: {existing_key[:20]}...")
        response = input("–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á? (y/N): ").lower()
        if response != 'y':
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á")
            return 0

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    print("\nüîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ SECRET_KEY...")
    new_key = generate_secret_key()

    print(f"üìù –ù–æ–≤—ã–π SECRET_KEY: {new_key}")
    print(f"üìè –î–ª–∏–Ω–∞: {len(new_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üîí –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å: ‚úÖ")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_files = []
    if Path('.env').exists():
        env_files.append('.env')
    if Path('.env.prod').exists():
        env_files.append('.env.prod')

    if env_files:
        print(f"\nüìÅ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(env_files)}")

        for env_file in env_files:
            response = input(f"–û–±–Ω–æ–≤–∏—Ç—å SECRET_KEY –≤ {env_file}? (y/N): ").lower()
            if response == 'y':
                if update_env_file(env_file, new_key):
                    print(f"‚úÖ {env_file} –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {env_file}")
    else:
        print("\nüìÅ –§–∞–π–ª—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª?")
        response = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (.env/.env.prod): ").strip()

        if response in ['.env', '.env.prod']:
            if create_env_file(response, new_key):
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω {response}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {response}")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞")

    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SECRET_KEY –≤ –≤–∞—à .env —Ñ–∞–π–ª")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è SECRET_KEY")
    print("4. –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env.prod —Ñ–∞–π–ª")

    print("\nüîí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    print("- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–º–º–∏—Ç—å—Ç–µ SECRET_KEY –≤ git")
    print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
    print("- –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ SECRET_KEY")
    print("- –•—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ .env —Ñ–∞–π–ª–æ–≤ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")

    return 0


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
